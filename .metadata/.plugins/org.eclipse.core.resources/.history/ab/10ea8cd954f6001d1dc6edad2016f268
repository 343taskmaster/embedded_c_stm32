//We will using bit set/reset
// SET means on
// reset means off
#include <stdint.h>
#include "stm32f4xx.h"

#define GPIOAEN 		(1U<<0)
#define UART2AEN 		(1U<<17)

#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE 			(1U<<7)

#define SYS_FREQ 		16000000 // 16M cycles per second
#define APB1_CLK 		SYS_FREQ

#define UART_BAUDRATE 	115200

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);

void uar2_tx_init(void);
void uart2_write(int ch);

int main(void)
{

	uart2_tx_init();

	while(1)
	{
		uart2_write('Y');
	}

}

void uart2_tx_init(void){

	/********************Configure UART GPIO PIN*********************/
	/*Enable Clock Access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN; //set position 1 to 0

	/*SET PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);  //set position 4 to 0
	GPIOA->MODER |=(1U<<5);  //set position 5 to 1

	/*SET PA2 Alternate function type to UART_TX (AF07- AF00 )*/

	// PA2 uses AFRL2 = bit 8,9,10,11
	GPIOA->AFR[0] |= (1U<<8); 	// AFRL2 BIT 8 SET to 1
	GPIOA->AFR[0] |= (1U<<9);  	// AFRL2 BIT 8 SET to 1
	GPIOA->AFR[0] |= (1U<<10);  // AFRL2 BIT 8 SET to 1
	GPIOA->AFR[0] |= (1U<<11);  // AFRL2 BIT 8 SET to 0
								// 0111 =AF7

	/**********************Configure UART Module******************************************/

	/*Enable Clock access to UART2 */
	RCC->APB1ENR |= UART2AEN;

	/*Configure Baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE;

	/*Enable UART Module*/
	USART2->CR1 = CR1_UE;
}

void uart2_write(int ch) {

	/*Make sure the transmit data register is empty */
	while(!(USART2->SR & SR_TXE)) {}
	/*Write to transmit data register*/

	USART2->DR =(ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,uint32_t Baudrate )
{
	USARTx->BRR = compute_uart_bd(PeriphClk,Baudrate); //1 this where we will store the value of compute_uart_bd
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 return ((PeriphClk + (BaudRate/2U)) /BaudRate); //this function will computer and store the value baudrate register [1]
}
