
010_adc2_continous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800154c  0800154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015fc  080015fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080015fc  080015fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015fc  080015fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015fc  080015fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001600  08001600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001668  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001668  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e61  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008d2  00000000  00000000  00022ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000237c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00023958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb35  00000000  00000000  00023a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f17  00000000  00000000  000335c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055385  00000000  00000000  000354dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008a861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c88  00000000  00000000  0008a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001534 	.word	0x08001534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001534 	.word	0x08001534

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_ADON		(1U<<0)
#define CR2_SWSTART     (1U<<30)
#define SR_EOC			(1U<<1)
#define CR2_CONT		(1U<<1)

void pa1_adc_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	/***Configure the ADC GPIO Pin ***/

	/*Enable Clock Access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <pa1_adc_init+0x50>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <pa1_adc_init+0x50>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set the mode of PA1 to analog*/

	GPIOA->MODER |=(1U<<2); // set bit 2 to 1 for GPIOA->MODER1
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <pa1_adc_init+0x54>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <pa1_adc_init+0x54>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3); // set bit 3 to 1  for GPIOA->MODER1
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <pa1_adc_init+0x54>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <pa1_adc_init+0x54>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	/***Configure the ADC module ***/

	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <pa1_adc_init+0x50>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <pa1_adc_init+0x50>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6453      	str	r3, [r2, #68]	; 0x44

	/*Conversion sequence star, SQ1 */
	ADC1->SQR3 =  ADC_CH1;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <pa1_adc_init+0x58>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence lenght, How many channels are we sampling  */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <pa1_adc_init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable the ADC Module*/
	ADC1->CR2 = CR2_ADON;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <pa1_adc_init+0x58>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	609a      	str	r2, [r3, #8]
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40012000 	.word	0x40012000

080002dc <start_conversion>:

void start_conversion(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    /* Enable Continous Conversion */
	ADC1->CR2 |= CR2_CONT;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <start_conversion+0x28>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a07      	ldr	r2, [pc, #28]	; (8000304 <start_conversion+0x28>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <start_conversion+0x28>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <start_conversion+0x28>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]

}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40012000 	.word	0x40012000

08000308 <adc_read>:

uint32_t adc_read(void){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	/*wait for the converstion to be complete*/
	while (!(ADC1->SR & SR_EOC)) {}
 800030c:	bf00      	nop
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <adc_read+0x20>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <adc_read+0x6>
	/*Read Converted result*/
	return (ADC1->DR);
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <adc_read+0x20>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40012000 	.word	0x40012000

0800032c <main>:
#include "adc.h"

uint32_t sensor_value;

int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0




	uart2_tx_init();
 8000330:	f000 f8c4 	bl	80004bc <uart2_tx_init>
	pa1_adc_init();
 8000334:	f7ff ffa4 	bl	8000280 <pa1_adc_init>
	start_conversion();
 8000338:	f7ff ffd0 	bl	80002dc <start_conversion>

	while(1)
	{


		sensor_value = adc_read();
 800033c:	f7ff ffe4 	bl	8000308 <adc_read>
 8000340:	4603      	mov	r3, r0
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <main+0x28>)
 8000344:	6013      	str	r3, [r2, #0]
		printf("Sensor Value : %d \n\r", (int)sensor_value);
 8000346:	4b03      	ldr	r3, [pc, #12]	; (8000354 <main+0x28>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <main+0x2c>)
 800034e:	f000 f99b 	bl	8000688 <iprintf>
		sensor_value = adc_read();
 8000352:	e7f3      	b.n	800033c <main+0x10>
 8000354:	2000008c 	.word	0x2000008c
 8000358:	0800154c 	.word	0x0800154c

0800035c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
	}

return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f877 	bl	80004a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
	}
	return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f6:	605a      	str	r2, [r3, #4]
	return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f000 f8dc 	bl	8000624 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20020000 	.word	0x20020000
 8000498:	00000400 	.word	0x00000400
 800049c:	20000080 	.word	0x20000080
 80004a0:	200000a0 	.word	0x200000a0

080004a4 <__io_putchar>:
void uart2_tx_init(void);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 f851 	bl	8000554 <uart2_write>
	return ch;
 80004b2:	687b      	ldr	r3, [r7, #4]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <uart2_tx_init>:


}

void uart2_tx_init(void) //Transmit
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <uart2_tx_init+0x88>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <uart2_tx_init+0x88>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <uart2_tx_init+0x8c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <uart2_tx_init+0x8c>)
 80004d2:	f023 0310 	bic.w	r3, r3, #16
 80004d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <uart2_tx_init+0x8c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <uart2_tx_init+0x8c>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <uart2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <uart2_tx_init+0x8c>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <uart2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <uart2_tx_init+0x8c>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <uart2_tx_init+0x8c>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <uart2_tx_init+0x8c>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <uart2_tx_init+0x8c>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <uart2_tx_init+0x8c>)
 800050e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000512:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <uart2_tx_init+0x88>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <uart2_tx_init+0x88>)
 800051a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <uart2_tx_init+0x90>)
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <uart2_tx_init+0x94>)
 8000528:	f000 f82c 	bl	8000584 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  CR1_TE;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <uart2_tx_init+0x94>)
 800052e:	2208      	movs	r2, #8
 8000530:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <uart2_tx_init+0x94>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	4a06      	ldr	r2, [pc, #24]	; (8000550 <uart2_tx_init+0x94>)
 8000538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800053c:	60d3      	str	r3, [r2, #12]


}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	00f42400 	.word	0x00f42400
 8000550:	40004400 	.word	0x40004400

08000554 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800055c:	bf00      	nop
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <uart2_write+0x2c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <uart2_write+0x2c>)
 800056e:	b2db      	uxtb	r3, r3
 8000570:	6053      	str	r3, [r2, #4]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40004400 	.word	0x40004400

08000584 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f000 f808 	bl	80005a8 <compute_uart_bd>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	609a      	str	r2, [r3, #8]
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	085a      	lsrs	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	441a      	add	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f817 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe93 	bl	800032c <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000614:	08001604 	.word	0x08001604
  ldr r2, =_sbss
 8000618:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800061c:	200000a0 	.word	0x200000a0

08000620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <__errno>:
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <__errno+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4d0d      	ldr	r5, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2600      	movs	r6, #0
 800063c:	42a6      	cmp	r6, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4d0b      	ldr	r5, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 ff76 	bl	8001534 <_init>
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2600      	movs	r6, #0
 800064e:	42a6      	cmp	r6, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f855 3b04 	ldr.w	r3, [r5], #4
 8000658:	4798      	blx	r3
 800065a:	3601      	adds	r6, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	4798      	blx	r3
 8000664:	3601      	adds	r6, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	080015fc 	.word	0x080015fc
 800066c:	080015fc 	.word	0x080015fc
 8000670:	080015fc 	.word	0x080015fc
 8000674:	08001600 	.word	0x08001600

08000678 <memset>:
 8000678:	4402      	add	r2, r0
 800067a:	4603      	mov	r3, r0
 800067c:	4293      	cmp	r3, r2
 800067e:	d100      	bne.n	8000682 <memset+0xa>
 8000680:	4770      	bx	lr
 8000682:	f803 1b01 	strb.w	r1, [r3], #1
 8000686:	e7f9      	b.n	800067c <memset+0x4>

08000688 <iprintf>:
 8000688:	b40f      	push	{r0, r1, r2, r3}
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <iprintf+0x2c>)
 800068c:	b513      	push	{r0, r1, r4, lr}
 800068e:	681c      	ldr	r4, [r3, #0]
 8000690:	b124      	cbz	r4, 800069c <iprintf+0x14>
 8000692:	69a3      	ldr	r3, [r4, #24]
 8000694:	b913      	cbnz	r3, 800069c <iprintf+0x14>
 8000696:	4620      	mov	r0, r4
 8000698:	f000 f866 	bl	8000768 <__sinit>
 800069c:	ab05      	add	r3, sp, #20
 800069e:	9a04      	ldr	r2, [sp, #16]
 80006a0:	68a1      	ldr	r1, [r4, #8]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4620      	mov	r0, r4
 80006a6:	f000 f983 	bl	80009b0 <_vfiprintf_r>
 80006aa:	b002      	add	sp, #8
 80006ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b0:	b004      	add	sp, #16
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <std>:
 80006b8:	2300      	movs	r3, #0
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	e9c0 3300 	strd	r3, r3, [r0]
 80006c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006c6:	6083      	str	r3, [r0, #8]
 80006c8:	8181      	strh	r1, [r0, #12]
 80006ca:	6643      	str	r3, [r0, #100]	; 0x64
 80006cc:	81c2      	strh	r2, [r0, #14]
 80006ce:	6183      	str	r3, [r0, #24]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2208      	movs	r2, #8
 80006d4:	305c      	adds	r0, #92	; 0x5c
 80006d6:	f7ff ffcf 	bl	8000678 <memset>
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <std+0x38>)
 80006dc:	6263      	str	r3, [r4, #36]	; 0x24
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <std+0x3c>)
 80006e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <std+0x40>)
 80006e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <std+0x44>)
 80006e8:	6224      	str	r4, [r4, #32]
 80006ea:	6323      	str	r3, [r4, #48]	; 0x30
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	bf00      	nop
 80006f0:	08000f59 	.word	0x08000f59
 80006f4:	08000f7b 	.word	0x08000f7b
 80006f8:	08000fb3 	.word	0x08000fb3
 80006fc:	08000fd7 	.word	0x08000fd7

08000700 <_cleanup_r>:
 8000700:	4901      	ldr	r1, [pc, #4]	; (8000708 <_cleanup_r+0x8>)
 8000702:	f000 b8af 	b.w	8000864 <_fwalk_reent>
 8000706:	bf00      	nop
 8000708:	080012b1 	.word	0x080012b1

0800070c <__sfmoreglue>:
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	1e4a      	subs	r2, r1, #1
 8000710:	2568      	movs	r5, #104	; 0x68
 8000712:	4355      	muls	r5, r2
 8000714:	460e      	mov	r6, r1
 8000716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800071a:	f000 f8c5 	bl	80008a8 <_malloc_r>
 800071e:	4604      	mov	r4, r0
 8000720:	b140      	cbz	r0, 8000734 <__sfmoreglue+0x28>
 8000722:	2100      	movs	r1, #0
 8000724:	e9c0 1600 	strd	r1, r6, [r0]
 8000728:	300c      	adds	r0, #12
 800072a:	60a0      	str	r0, [r4, #8]
 800072c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000730:	f7ff ffa2 	bl	8000678 <memset>
 8000734:	4620      	mov	r0, r4
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__sfp_lock_acquire>:
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <__sfp_lock_acquire+0x8>)
 800073a:	f000 b8b3 	b.w	80008a4 <__retarget_lock_acquire_recursive>
 800073e:	bf00      	nop
 8000740:	20000098 	.word	0x20000098

08000744 <__sfp_lock_release>:
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <__sfp_lock_release+0x8>)
 8000746:	f000 b8ae 	b.w	80008a6 <__retarget_lock_release_recursive>
 800074a:	bf00      	nop
 800074c:	20000098 	.word	0x20000098

08000750 <__sinit_lock_acquire>:
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <__sinit_lock_acquire+0x8>)
 8000752:	f000 b8a7 	b.w	80008a4 <__retarget_lock_acquire_recursive>
 8000756:	bf00      	nop
 8000758:	20000093 	.word	0x20000093

0800075c <__sinit_lock_release>:
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <__sinit_lock_release+0x8>)
 800075e:	f000 b8a2 	b.w	80008a6 <__retarget_lock_release_recursive>
 8000762:	bf00      	nop
 8000764:	20000093 	.word	0x20000093

08000768 <__sinit>:
 8000768:	b510      	push	{r4, lr}
 800076a:	4604      	mov	r4, r0
 800076c:	f7ff fff0 	bl	8000750 <__sinit_lock_acquire>
 8000770:	69a3      	ldr	r3, [r4, #24]
 8000772:	b11b      	cbz	r3, 800077c <__sinit+0x14>
 8000774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000778:	f7ff bff0 	b.w	800075c <__sinit_lock_release>
 800077c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000780:	6523      	str	r3, [r4, #80]	; 0x50
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <__sinit+0x68>)
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <__sinit+0x6c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	62a2      	str	r2, [r4, #40]	; 0x28
 800078a:	42a3      	cmp	r3, r4
 800078c:	bf04      	itt	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	61a3      	streq	r3, [r4, #24]
 8000792:	4620      	mov	r0, r4
 8000794:	f000 f820 	bl	80007d8 <__sfp>
 8000798:	6060      	str	r0, [r4, #4]
 800079a:	4620      	mov	r0, r4
 800079c:	f000 f81c 	bl	80007d8 <__sfp>
 80007a0:	60a0      	str	r0, [r4, #8]
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 f818 	bl	80007d8 <__sfp>
 80007a8:	2200      	movs	r2, #0
 80007aa:	60e0      	str	r0, [r4, #12]
 80007ac:	2104      	movs	r1, #4
 80007ae:	6860      	ldr	r0, [r4, #4]
 80007b0:	f7ff ff82 	bl	80006b8 <std>
 80007b4:	68a0      	ldr	r0, [r4, #8]
 80007b6:	2201      	movs	r2, #1
 80007b8:	2109      	movs	r1, #9
 80007ba:	f7ff ff7d 	bl	80006b8 <std>
 80007be:	68e0      	ldr	r0, [r4, #12]
 80007c0:	2202      	movs	r2, #2
 80007c2:	2112      	movs	r1, #18
 80007c4:	f7ff ff78 	bl	80006b8 <std>
 80007c8:	2301      	movs	r3, #1
 80007ca:	61a3      	str	r3, [r4, #24]
 80007cc:	e7d2      	b.n	8000774 <__sinit+0xc>
 80007ce:	bf00      	nop
 80007d0:	08001564 	.word	0x08001564
 80007d4:	08000701 	.word	0x08000701

080007d8 <__sfp>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	4607      	mov	r7, r0
 80007dc:	f7ff ffac 	bl	8000738 <__sfp_lock_acquire>
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <__sfp+0x84>)
 80007e2:	681e      	ldr	r6, [r3, #0]
 80007e4:	69b3      	ldr	r3, [r6, #24]
 80007e6:	b913      	cbnz	r3, 80007ee <__sfp+0x16>
 80007e8:	4630      	mov	r0, r6
 80007ea:	f7ff ffbd 	bl	8000768 <__sinit>
 80007ee:	3648      	adds	r6, #72	; 0x48
 80007f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	d503      	bpl.n	8000800 <__sfp+0x28>
 80007f8:	6833      	ldr	r3, [r6, #0]
 80007fa:	b30b      	cbz	r3, 8000840 <__sfp+0x68>
 80007fc:	6836      	ldr	r6, [r6, #0]
 80007fe:	e7f7      	b.n	80007f0 <__sfp+0x18>
 8000800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000804:	b9d5      	cbnz	r5, 800083c <__sfp+0x64>
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <__sfp+0x88>)
 8000808:	60e3      	str	r3, [r4, #12]
 800080a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800080e:	6665      	str	r5, [r4, #100]	; 0x64
 8000810:	f000 f847 	bl	80008a2 <__retarget_lock_init_recursive>
 8000814:	f7ff ff96 	bl	8000744 <__sfp_lock_release>
 8000818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800081c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000820:	6025      	str	r5, [r4, #0]
 8000822:	61a5      	str	r5, [r4, #24]
 8000824:	2208      	movs	r2, #8
 8000826:	4629      	mov	r1, r5
 8000828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800082c:	f7ff ff24 	bl	8000678 <memset>
 8000830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000838:	4620      	mov	r0, r4
 800083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083c:	3468      	adds	r4, #104	; 0x68
 800083e:	e7d9      	b.n	80007f4 <__sfp+0x1c>
 8000840:	2104      	movs	r1, #4
 8000842:	4638      	mov	r0, r7
 8000844:	f7ff ff62 	bl	800070c <__sfmoreglue>
 8000848:	4604      	mov	r4, r0
 800084a:	6030      	str	r0, [r6, #0]
 800084c:	2800      	cmp	r0, #0
 800084e:	d1d5      	bne.n	80007fc <__sfp+0x24>
 8000850:	f7ff ff78 	bl	8000744 <__sfp_lock_release>
 8000854:	230c      	movs	r3, #12
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	e7ee      	b.n	8000838 <__sfp+0x60>
 800085a:	bf00      	nop
 800085c:	08001564 	.word	0x08001564
 8000860:	ffff0001 	.word	0xffff0001

08000864 <_fwalk_reent>:
 8000864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000868:	4606      	mov	r6, r0
 800086a:	4688      	mov	r8, r1
 800086c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000870:	2700      	movs	r7, #0
 8000872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000876:	f1b9 0901 	subs.w	r9, r9, #1
 800087a:	d505      	bpl.n	8000888 <_fwalk_reent+0x24>
 800087c:	6824      	ldr	r4, [r4, #0]
 800087e:	2c00      	cmp	r4, #0
 8000880:	d1f7      	bne.n	8000872 <_fwalk_reent+0xe>
 8000882:	4638      	mov	r0, r7
 8000884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000888:	89ab      	ldrh	r3, [r5, #12]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d907      	bls.n	800089e <_fwalk_reent+0x3a>
 800088e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000892:	3301      	adds	r3, #1
 8000894:	d003      	beq.n	800089e <_fwalk_reent+0x3a>
 8000896:	4629      	mov	r1, r5
 8000898:	4630      	mov	r0, r6
 800089a:	47c0      	blx	r8
 800089c:	4307      	orrs	r7, r0
 800089e:	3568      	adds	r5, #104	; 0x68
 80008a0:	e7e9      	b.n	8000876 <_fwalk_reent+0x12>

080008a2 <__retarget_lock_init_recursive>:
 80008a2:	4770      	bx	lr

080008a4 <__retarget_lock_acquire_recursive>:
 80008a4:	4770      	bx	lr

080008a6 <__retarget_lock_release_recursive>:
 80008a6:	4770      	bx	lr

080008a8 <_malloc_r>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	1ccd      	adds	r5, r1, #3
 80008ac:	f025 0503 	bic.w	r5, r5, #3
 80008b0:	3508      	adds	r5, #8
 80008b2:	2d0c      	cmp	r5, #12
 80008b4:	bf38      	it	cc
 80008b6:	250c      	movcc	r5, #12
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	4606      	mov	r6, r0
 80008bc:	db01      	blt.n	80008c2 <_malloc_r+0x1a>
 80008be:	42a9      	cmp	r1, r5
 80008c0:	d903      	bls.n	80008ca <_malloc_r+0x22>
 80008c2:	230c      	movs	r3, #12
 80008c4:	6033      	str	r3, [r6, #0]
 80008c6:	2000      	movs	r0, #0
 80008c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ca:	f000 fda3 	bl	8001414 <__malloc_lock>
 80008ce:	4921      	ldr	r1, [pc, #132]	; (8000954 <_malloc_r+0xac>)
 80008d0:	680a      	ldr	r2, [r1, #0]
 80008d2:	4614      	mov	r4, r2
 80008d4:	b99c      	cbnz	r4, 80008fe <_malloc_r+0x56>
 80008d6:	4f20      	ldr	r7, [pc, #128]	; (8000958 <_malloc_r+0xb0>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b923      	cbnz	r3, 80008e6 <_malloc_r+0x3e>
 80008dc:	4621      	mov	r1, r4
 80008de:	4630      	mov	r0, r6
 80008e0:	f000 fb2a 	bl	8000f38 <_sbrk_r>
 80008e4:	6038      	str	r0, [r7, #0]
 80008e6:	4629      	mov	r1, r5
 80008e8:	4630      	mov	r0, r6
 80008ea:	f000 fb25 	bl	8000f38 <_sbrk_r>
 80008ee:	1c43      	adds	r3, r0, #1
 80008f0:	d123      	bne.n	800093a <_malloc_r+0x92>
 80008f2:	230c      	movs	r3, #12
 80008f4:	6033      	str	r3, [r6, #0]
 80008f6:	4630      	mov	r0, r6
 80008f8:	f000 fd92 	bl	8001420 <__malloc_unlock>
 80008fc:	e7e3      	b.n	80008c6 <_malloc_r+0x1e>
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	1b5b      	subs	r3, r3, r5
 8000902:	d417      	bmi.n	8000934 <_malloc_r+0x8c>
 8000904:	2b0b      	cmp	r3, #11
 8000906:	d903      	bls.n	8000910 <_malloc_r+0x68>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	441c      	add	r4, r3
 800090c:	6025      	str	r5, [r4, #0]
 800090e:	e004      	b.n	800091a <_malloc_r+0x72>
 8000910:	6863      	ldr	r3, [r4, #4]
 8000912:	42a2      	cmp	r2, r4
 8000914:	bf0c      	ite	eq
 8000916:	600b      	streq	r3, [r1, #0]
 8000918:	6053      	strne	r3, [r2, #4]
 800091a:	4630      	mov	r0, r6
 800091c:	f000 fd80 	bl	8001420 <__malloc_unlock>
 8000920:	f104 000b 	add.w	r0, r4, #11
 8000924:	1d23      	adds	r3, r4, #4
 8000926:	f020 0007 	bic.w	r0, r0, #7
 800092a:	1ac2      	subs	r2, r0, r3
 800092c:	d0cc      	beq.n	80008c8 <_malloc_r+0x20>
 800092e:	1a1b      	subs	r3, r3, r0
 8000930:	50a3      	str	r3, [r4, r2]
 8000932:	e7c9      	b.n	80008c8 <_malloc_r+0x20>
 8000934:	4622      	mov	r2, r4
 8000936:	6864      	ldr	r4, [r4, #4]
 8000938:	e7cc      	b.n	80008d4 <_malloc_r+0x2c>
 800093a:	1cc4      	adds	r4, r0, #3
 800093c:	f024 0403 	bic.w	r4, r4, #3
 8000940:	42a0      	cmp	r0, r4
 8000942:	d0e3      	beq.n	800090c <_malloc_r+0x64>
 8000944:	1a21      	subs	r1, r4, r0
 8000946:	4630      	mov	r0, r6
 8000948:	f000 faf6 	bl	8000f38 <_sbrk_r>
 800094c:	3001      	adds	r0, #1
 800094e:	d1dd      	bne.n	800090c <_malloc_r+0x64>
 8000950:	e7cf      	b.n	80008f2 <_malloc_r+0x4a>
 8000952:	bf00      	nop
 8000954:	20000084 	.word	0x20000084
 8000958:	20000088 	.word	0x20000088

0800095c <__sfputc_r>:
 800095c:	6893      	ldr	r3, [r2, #8]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	b410      	push	{r4}
 8000964:	6093      	str	r3, [r2, #8]
 8000966:	da08      	bge.n	800097a <__sfputc_r+0x1e>
 8000968:	6994      	ldr	r4, [r2, #24]
 800096a:	42a3      	cmp	r3, r4
 800096c:	db01      	blt.n	8000972 <__sfputc_r+0x16>
 800096e:	290a      	cmp	r1, #10
 8000970:	d103      	bne.n	800097a <__sfputc_r+0x1e>
 8000972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000976:	f000 bb33 	b.w	8000fe0 <__swbuf_r>
 800097a:	6813      	ldr	r3, [r2, #0]
 800097c:	1c58      	adds	r0, r3, #1
 800097e:	6010      	str	r0, [r2, #0]
 8000980:	7019      	strb	r1, [r3, #0]
 8000982:	4608      	mov	r0, r1
 8000984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000988:	4770      	bx	lr

0800098a <__sfputs_r>:
 800098a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098c:	4606      	mov	r6, r0
 800098e:	460f      	mov	r7, r1
 8000990:	4614      	mov	r4, r2
 8000992:	18d5      	adds	r5, r2, r3
 8000994:	42ac      	cmp	r4, r5
 8000996:	d101      	bne.n	800099c <__sfputs_r+0x12>
 8000998:	2000      	movs	r0, #0
 800099a:	e007      	b.n	80009ac <__sfputs_r+0x22>
 800099c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a0:	463a      	mov	r2, r7
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff ffda 	bl	800095c <__sfputc_r>
 80009a8:	1c43      	adds	r3, r0, #1
 80009aa:	d1f3      	bne.n	8000994 <__sfputs_r+0xa>
 80009ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009b0 <_vfiprintf_r>:
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b4:	460d      	mov	r5, r1
 80009b6:	b09d      	sub	sp, #116	; 0x74
 80009b8:	4614      	mov	r4, r2
 80009ba:	4698      	mov	r8, r3
 80009bc:	4606      	mov	r6, r0
 80009be:	b118      	cbz	r0, 80009c8 <_vfiprintf_r+0x18>
 80009c0:	6983      	ldr	r3, [r0, #24]
 80009c2:	b90b      	cbnz	r3, 80009c8 <_vfiprintf_r+0x18>
 80009c4:	f7ff fed0 	bl	8000768 <__sinit>
 80009c8:	4b89      	ldr	r3, [pc, #548]	; (8000bf0 <_vfiprintf_r+0x240>)
 80009ca:	429d      	cmp	r5, r3
 80009cc:	d11b      	bne.n	8000a06 <_vfiprintf_r+0x56>
 80009ce:	6875      	ldr	r5, [r6, #4]
 80009d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009d2:	07d9      	lsls	r1, r3, #31
 80009d4:	d405      	bmi.n	80009e2 <_vfiprintf_r+0x32>
 80009d6:	89ab      	ldrh	r3, [r5, #12]
 80009d8:	059a      	lsls	r2, r3, #22
 80009da:	d402      	bmi.n	80009e2 <_vfiprintf_r+0x32>
 80009dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009de:	f7ff ff61 	bl	80008a4 <__retarget_lock_acquire_recursive>
 80009e2:	89ab      	ldrh	r3, [r5, #12]
 80009e4:	071b      	lsls	r3, r3, #28
 80009e6:	d501      	bpl.n	80009ec <_vfiprintf_r+0x3c>
 80009e8:	692b      	ldr	r3, [r5, #16]
 80009ea:	b9eb      	cbnz	r3, 8000a28 <_vfiprintf_r+0x78>
 80009ec:	4629      	mov	r1, r5
 80009ee:	4630      	mov	r0, r6
 80009f0:	f000 fb5a 	bl	80010a8 <__swsetup_r>
 80009f4:	b1c0      	cbz	r0, 8000a28 <_vfiprintf_r+0x78>
 80009f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009f8:	07dc      	lsls	r4, r3, #31
 80009fa:	d50e      	bpl.n	8000a1a <_vfiprintf_r+0x6a>
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	b01d      	add	sp, #116	; 0x74
 8000a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a06:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <_vfiprintf_r+0x244>)
 8000a08:	429d      	cmp	r5, r3
 8000a0a:	d101      	bne.n	8000a10 <_vfiprintf_r+0x60>
 8000a0c:	68b5      	ldr	r5, [r6, #8]
 8000a0e:	e7df      	b.n	80009d0 <_vfiprintf_r+0x20>
 8000a10:	4b79      	ldr	r3, [pc, #484]	; (8000bf8 <_vfiprintf_r+0x248>)
 8000a12:	429d      	cmp	r5, r3
 8000a14:	bf08      	it	eq
 8000a16:	68f5      	ldreq	r5, [r6, #12]
 8000a18:	e7da      	b.n	80009d0 <_vfiprintf_r+0x20>
 8000a1a:	89ab      	ldrh	r3, [r5, #12]
 8000a1c:	0598      	lsls	r0, r3, #22
 8000a1e:	d4ed      	bmi.n	80009fc <_vfiprintf_r+0x4c>
 8000a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a22:	f7ff ff40 	bl	80008a6 <__retarget_lock_release_recursive>
 8000a26:	e7e9      	b.n	80009fc <_vfiprintf_r+0x4c>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a36:	2330      	movs	r3, #48	; 0x30
 8000a38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000bfc <_vfiprintf_r+0x24c>
 8000a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a40:	f04f 0901 	mov.w	r9, #1
 8000a44:	4623      	mov	r3, r4
 8000a46:	469a      	mov	sl, r3
 8000a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a4c:	b10a      	cbz	r2, 8000a52 <_vfiprintf_r+0xa2>
 8000a4e:	2a25      	cmp	r2, #37	; 0x25
 8000a50:	d1f9      	bne.n	8000a46 <_vfiprintf_r+0x96>
 8000a52:	ebba 0b04 	subs.w	fp, sl, r4
 8000a56:	d00b      	beq.n	8000a70 <_vfiprintf_r+0xc0>
 8000a58:	465b      	mov	r3, fp
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	4629      	mov	r1, r5
 8000a5e:	4630      	mov	r0, r6
 8000a60:	f7ff ff93 	bl	800098a <__sfputs_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	f000 80aa 	beq.w	8000bbe <_vfiprintf_r+0x20e>
 8000a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a6c:	445a      	add	r2, fp
 8000a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8000a70:	f89a 3000 	ldrb.w	r3, [sl]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 80a2 	beq.w	8000bbe <_vfiprintf_r+0x20e>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a84:	f10a 0a01 	add.w	sl, sl, #1
 8000a88:	9304      	str	r3, [sp, #16]
 8000a8a:	9307      	str	r3, [sp, #28]
 8000a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a90:	931a      	str	r3, [sp, #104]	; 0x68
 8000a92:	4654      	mov	r4, sl
 8000a94:	2205      	movs	r2, #5
 8000a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a9a:	4858      	ldr	r0, [pc, #352]	; (8000bfc <_vfiprintf_r+0x24c>)
 8000a9c:	f7ff fba0 	bl	80001e0 <memchr>
 8000aa0:	9a04      	ldr	r2, [sp, #16]
 8000aa2:	b9d8      	cbnz	r0, 8000adc <_vfiprintf_r+0x12c>
 8000aa4:	06d1      	lsls	r1, r2, #27
 8000aa6:	bf44      	itt	mi
 8000aa8:	2320      	movmi	r3, #32
 8000aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000aae:	0713      	lsls	r3, r2, #28
 8000ab0:	bf44      	itt	mi
 8000ab2:	232b      	movmi	r3, #43	; 0x2b
 8000ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8000abc:	2b2a      	cmp	r3, #42	; 0x2a
 8000abe:	d015      	beq.n	8000aec <_vfiprintf_r+0x13c>
 8000ac0:	9a07      	ldr	r2, [sp, #28]
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f04f 0c0a 	mov.w	ip, #10
 8000aca:	4621      	mov	r1, r4
 8000acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ad0:	3b30      	subs	r3, #48	; 0x30
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	d94e      	bls.n	8000b74 <_vfiprintf_r+0x1c4>
 8000ad6:	b1b0      	cbz	r0, 8000b06 <_vfiprintf_r+0x156>
 8000ad8:	9207      	str	r2, [sp, #28]
 8000ada:	e014      	b.n	8000b06 <_vfiprintf_r+0x156>
 8000adc:	eba0 0308 	sub.w	r3, r0, r8
 8000ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	9304      	str	r3, [sp, #16]
 8000ae8:	46a2      	mov	sl, r4
 8000aea:	e7d2      	b.n	8000a92 <_vfiprintf_r+0xe2>
 8000aec:	9b03      	ldr	r3, [sp, #12]
 8000aee:	1d19      	adds	r1, r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	9103      	str	r1, [sp, #12]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bfbb      	ittet	lt
 8000af8:	425b      	neglt	r3, r3
 8000afa:	f042 0202 	orrlt.w	r2, r2, #2
 8000afe:	9307      	strge	r3, [sp, #28]
 8000b00:	9307      	strlt	r3, [sp, #28]
 8000b02:	bfb8      	it	lt
 8000b04:	9204      	strlt	r2, [sp, #16]
 8000b06:	7823      	ldrb	r3, [r4, #0]
 8000b08:	2b2e      	cmp	r3, #46	; 0x2e
 8000b0a:	d10c      	bne.n	8000b26 <_vfiprintf_r+0x176>
 8000b0c:	7863      	ldrb	r3, [r4, #1]
 8000b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000b10:	d135      	bne.n	8000b7e <_vfiprintf_r+0x1ce>
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	1d1a      	adds	r2, r3, #4
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	9203      	str	r2, [sp, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bfb8      	it	lt
 8000b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b22:	3402      	adds	r4, #2
 8000b24:	9305      	str	r3, [sp, #20]
 8000b26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c0c <_vfiprintf_r+0x25c>
 8000b2a:	7821      	ldrb	r1, [r4, #0]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4650      	mov	r0, sl
 8000b30:	f7ff fb56 	bl	80001e0 <memchr>
 8000b34:	b140      	cbz	r0, 8000b48 <_vfiprintf_r+0x198>
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	eba0 000a 	sub.w	r0, r0, sl
 8000b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b40:	9b04      	ldr	r3, [sp, #16]
 8000b42:	4303      	orrs	r3, r0
 8000b44:	3401      	adds	r4, #1
 8000b46:	9304      	str	r3, [sp, #16]
 8000b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b4c:	482c      	ldr	r0, [pc, #176]	; (8000c00 <_vfiprintf_r+0x250>)
 8000b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b52:	2206      	movs	r2, #6
 8000b54:	f7ff fb44 	bl	80001e0 <memchr>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d03f      	beq.n	8000bdc <_vfiprintf_r+0x22c>
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <_vfiprintf_r+0x254>)
 8000b5e:	bb1b      	cbnz	r3, 8000ba8 <_vfiprintf_r+0x1f8>
 8000b60:	9b03      	ldr	r3, [sp, #12]
 8000b62:	3307      	adds	r3, #7
 8000b64:	f023 0307 	bic.w	r3, r3, #7
 8000b68:	3308      	adds	r3, #8
 8000b6a:	9303      	str	r3, [sp, #12]
 8000b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b6e:	443b      	add	r3, r7
 8000b70:	9309      	str	r3, [sp, #36]	; 0x24
 8000b72:	e767      	b.n	8000a44 <_vfiprintf_r+0x94>
 8000b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b78:	460c      	mov	r4, r1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	e7a5      	b.n	8000aca <_vfiprintf_r+0x11a>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	3401      	adds	r4, #1
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 0c0a 	mov.w	ip, #10
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b90:	3a30      	subs	r2, #48	; 0x30
 8000b92:	2a09      	cmp	r2, #9
 8000b94:	d903      	bls.n	8000b9e <_vfiprintf_r+0x1ee>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0c5      	beq.n	8000b26 <_vfiprintf_r+0x176>
 8000b9a:	9105      	str	r1, [sp, #20]
 8000b9c:	e7c3      	b.n	8000b26 <_vfiprintf_r+0x176>
 8000b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e7f0      	b.n	8000b8a <_vfiprintf_r+0x1da>
 8000ba8:	ab03      	add	r3, sp, #12
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	462a      	mov	r2, r5
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <_vfiprintf_r+0x258>)
 8000bb0:	a904      	add	r1, sp, #16
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f3af 8000 	nop.w
 8000bb8:	4607      	mov	r7, r0
 8000bba:	1c78      	adds	r0, r7, #1
 8000bbc:	d1d6      	bne.n	8000b6c <_vfiprintf_r+0x1bc>
 8000bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bc0:	07d9      	lsls	r1, r3, #31
 8000bc2:	d405      	bmi.n	8000bd0 <_vfiprintf_r+0x220>
 8000bc4:	89ab      	ldrh	r3, [r5, #12]
 8000bc6:	059a      	lsls	r2, r3, #22
 8000bc8:	d402      	bmi.n	8000bd0 <_vfiprintf_r+0x220>
 8000bca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bcc:	f7ff fe6b 	bl	80008a6 <__retarget_lock_release_recursive>
 8000bd0:	89ab      	ldrh	r3, [r5, #12]
 8000bd2:	065b      	lsls	r3, r3, #25
 8000bd4:	f53f af12 	bmi.w	80009fc <_vfiprintf_r+0x4c>
 8000bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bda:	e711      	b.n	8000a00 <_vfiprintf_r+0x50>
 8000bdc:	ab03      	add	r3, sp, #12
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	462a      	mov	r2, r5
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_vfiprintf_r+0x258>)
 8000be4:	a904      	add	r1, sp, #16
 8000be6:	4630      	mov	r0, r6
 8000be8:	f000 f880 	bl	8000cec <_printf_i>
 8000bec:	e7e4      	b.n	8000bb8 <_vfiprintf_r+0x208>
 8000bee:	bf00      	nop
 8000bf0:	08001588 	.word	0x08001588
 8000bf4:	080015a8 	.word	0x080015a8
 8000bf8:	08001568 	.word	0x08001568
 8000bfc:	080015c8 	.word	0x080015c8
 8000c00:	080015d2 	.word	0x080015d2
 8000c04:	00000000 	.word	0x00000000
 8000c08:	0800098b 	.word	0x0800098b
 8000c0c:	080015ce 	.word	0x080015ce

08000c10 <_printf_common>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	4616      	mov	r6, r2
 8000c16:	4699      	mov	r9, r3
 8000c18:	688a      	ldr	r2, [r1, #8]
 8000c1a:	690b      	ldr	r3, [r1, #16]
 8000c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bfb8      	it	lt
 8000c24:	4613      	movlt	r3, r2
 8000c26:	6033      	str	r3, [r6, #0]
 8000c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c2c:	4607      	mov	r7, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	b10a      	cbz	r2, 8000c36 <_printf_common+0x26>
 8000c32:	3301      	adds	r3, #1
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	0699      	lsls	r1, r3, #26
 8000c3a:	bf42      	ittt	mi
 8000c3c:	6833      	ldrmi	r3, [r6, #0]
 8000c3e:	3302      	addmi	r3, #2
 8000c40:	6033      	strmi	r3, [r6, #0]
 8000c42:	6825      	ldr	r5, [r4, #0]
 8000c44:	f015 0506 	ands.w	r5, r5, #6
 8000c48:	d106      	bne.n	8000c58 <_printf_common+0x48>
 8000c4a:	f104 0a19 	add.w	sl, r4, #25
 8000c4e:	68e3      	ldr	r3, [r4, #12]
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	dc26      	bgt.n	8000ca6 <_printf_common+0x96>
 8000c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c5c:	1e13      	subs	r3, r2, #0
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	bf18      	it	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	0692      	lsls	r2, r2, #26
 8000c66:	d42b      	bmi.n	8000cc0 <_printf_common+0xb0>
 8000c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c0      	blx	r8
 8000c72:	3001      	adds	r0, #1
 8000c74:	d01e      	beq.n	8000cb4 <_printf_common+0xa4>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	68e5      	ldr	r5, [r4, #12]
 8000c7a:	6832      	ldr	r2, [r6, #0]
 8000c7c:	f003 0306 	and.w	r3, r3, #6
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	bf08      	it	eq
 8000c84:	1aad      	subeq	r5, r5, r2
 8000c86:	68a3      	ldr	r3, [r4, #8]
 8000c88:	6922      	ldr	r2, [r4, #16]
 8000c8a:	bf0c      	ite	eq
 8000c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c90:	2500      	movne	r5, #0
 8000c92:	4293      	cmp	r3, r2
 8000c94:	bfc4      	itt	gt
 8000c96:	1a9b      	subgt	r3, r3, r2
 8000c98:	18ed      	addgt	r5, r5, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	341a      	adds	r4, #26
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d11a      	bne.n	8000cd8 <_printf_common+0xc8>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e008      	b.n	8000cb8 <_printf_common+0xa8>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4652      	mov	r2, sl
 8000caa:	4649      	mov	r1, r9
 8000cac:	4638      	mov	r0, r7
 8000cae:	47c0      	blx	r8
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <_printf_common+0xac>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	e7c6      	b.n	8000c4e <_printf_common+0x3e>
 8000cc0:	18e1      	adds	r1, r4, r3
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cca:	4422      	add	r2, r4
 8000ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	e7c7      	b.n	8000c68 <_printf_common+0x58>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4649      	mov	r1, r9
 8000cde:	4638      	mov	r0, r7
 8000ce0:	47c0      	blx	r8
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d0e6      	beq.n	8000cb4 <_printf_common+0xa4>
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7d9      	b.n	8000c9e <_printf_common+0x8e>
	...

08000cec <_printf_i>:
 8000cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	7e27      	ldrb	r7, [r4, #24]
 8000cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cf8:	2f78      	cmp	r7, #120	; 0x78
 8000cfa:	4680      	mov	r8, r0
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d02:	d807      	bhi.n	8000d14 <_printf_i+0x28>
 8000d04:	2f62      	cmp	r7, #98	; 0x62
 8000d06:	d80a      	bhi.n	8000d1e <_printf_i+0x32>
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	f000 80d8 	beq.w	8000ebe <_printf_i+0x1d2>
 8000d0e:	2f58      	cmp	r7, #88	; 0x58
 8000d10:	f000 80a3 	beq.w	8000e5a <_printf_i+0x16e>
 8000d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d1c:	e03a      	b.n	8000d94 <_printf_i+0xa8>
 8000d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d22:	2b15      	cmp	r3, #21
 8000d24:	d8f6      	bhi.n	8000d14 <_printf_i+0x28>
 8000d26:	a001      	add	r0, pc, #4	; (adr r0, 8000d2c <_printf_i+0x40>)
 8000d28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d2c:	08000d85 	.word	0x08000d85
 8000d30:	08000d99 	.word	0x08000d99
 8000d34:	08000d15 	.word	0x08000d15
 8000d38:	08000d15 	.word	0x08000d15
 8000d3c:	08000d15 	.word	0x08000d15
 8000d40:	08000d15 	.word	0x08000d15
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	08000d15 	.word	0x08000d15
 8000d4c:	08000d15 	.word	0x08000d15
 8000d50:	08000d15 	.word	0x08000d15
 8000d54:	08000d15 	.word	0x08000d15
 8000d58:	08000ea5 	.word	0x08000ea5
 8000d5c:	08000dc9 	.word	0x08000dc9
 8000d60:	08000e87 	.word	0x08000e87
 8000d64:	08000d15 	.word	0x08000d15
 8000d68:	08000d15 	.word	0x08000d15
 8000d6c:	08000ec7 	.word	0x08000ec7
 8000d70:	08000d15 	.word	0x08000d15
 8000d74:	08000dc9 	.word	0x08000dc9
 8000d78:	08000d15 	.word	0x08000d15
 8000d7c:	08000d15 	.word	0x08000d15
 8000d80:	08000e8f 	.word	0x08000e8f
 8000d84:	680b      	ldr	r3, [r1, #0]
 8000d86:	1d1a      	adds	r2, r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	600a      	str	r2, [r1, #0]
 8000d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0a3      	b.n	8000ee0 <_printf_i+0x1f4>
 8000d98:	6825      	ldr	r5, [r4, #0]
 8000d9a:	6808      	ldr	r0, [r1, #0]
 8000d9c:	062e      	lsls	r6, r5, #24
 8000d9e:	f100 0304 	add.w	r3, r0, #4
 8000da2:	d50a      	bpl.n	8000dba <_printf_i+0xce>
 8000da4:	6805      	ldr	r5, [r0, #0]
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	da03      	bge.n	8000db4 <_printf_i+0xc8>
 8000dac:	232d      	movs	r3, #45	; 0x2d
 8000dae:	426d      	negs	r5, r5
 8000db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000db4:	485e      	ldr	r0, [pc, #376]	; (8000f30 <_printf_i+0x244>)
 8000db6:	230a      	movs	r3, #10
 8000db8:	e019      	b.n	8000dee <_printf_i+0x102>
 8000dba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dbe:	6805      	ldr	r5, [r0, #0]
 8000dc0:	600b      	str	r3, [r1, #0]
 8000dc2:	bf18      	it	ne
 8000dc4:	b22d      	sxthne	r5, r5
 8000dc6:	e7ef      	b.n	8000da8 <_printf_i+0xbc>
 8000dc8:	680b      	ldr	r3, [r1, #0]
 8000dca:	6825      	ldr	r5, [r4, #0]
 8000dcc:	1d18      	adds	r0, r3, #4
 8000dce:	6008      	str	r0, [r1, #0]
 8000dd0:	0628      	lsls	r0, r5, #24
 8000dd2:	d501      	bpl.n	8000dd8 <_printf_i+0xec>
 8000dd4:	681d      	ldr	r5, [r3, #0]
 8000dd6:	e002      	b.n	8000dde <_printf_i+0xf2>
 8000dd8:	0669      	lsls	r1, r5, #25
 8000dda:	d5fb      	bpl.n	8000dd4 <_printf_i+0xe8>
 8000ddc:	881d      	ldrh	r5, [r3, #0]
 8000dde:	4854      	ldr	r0, [pc, #336]	; (8000f30 <_printf_i+0x244>)
 8000de0:	2f6f      	cmp	r7, #111	; 0x6f
 8000de2:	bf0c      	ite	eq
 8000de4:	2308      	moveq	r3, #8
 8000de6:	230a      	movne	r3, #10
 8000de8:	2100      	movs	r1, #0
 8000dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dee:	6866      	ldr	r6, [r4, #4]
 8000df0:	60a6      	str	r6, [r4, #8]
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	bfa2      	ittt	ge
 8000df6:	6821      	ldrge	r1, [r4, #0]
 8000df8:	f021 0104 	bicge.w	r1, r1, #4
 8000dfc:	6021      	strge	r1, [r4, #0]
 8000dfe:	b90d      	cbnz	r5, 8000e04 <_printf_i+0x118>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d04d      	beq.n	8000ea0 <_printf_i+0x1b4>
 8000e04:	4616      	mov	r6, r2
 8000e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e0e:	5dc7      	ldrb	r7, [r0, r7]
 8000e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e14:	462f      	mov	r7, r5
 8000e16:	42bb      	cmp	r3, r7
 8000e18:	460d      	mov	r5, r1
 8000e1a:	d9f4      	bls.n	8000e06 <_printf_i+0x11a>
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d10b      	bne.n	8000e38 <_printf_i+0x14c>
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	07df      	lsls	r7, r3, #31
 8000e24:	d508      	bpl.n	8000e38 <_printf_i+0x14c>
 8000e26:	6923      	ldr	r3, [r4, #16]
 8000e28:	6861      	ldr	r1, [r4, #4]
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	bfde      	ittt	le
 8000e2e:	2330      	movle	r3, #48	; 0x30
 8000e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e38:	1b92      	subs	r2, r2, r6
 8000e3a:	6122      	str	r2, [r4, #16]
 8000e3c:	f8cd a000 	str.w	sl, [sp]
 8000e40:	464b      	mov	r3, r9
 8000e42:	aa03      	add	r2, sp, #12
 8000e44:	4621      	mov	r1, r4
 8000e46:	4640      	mov	r0, r8
 8000e48:	f7ff fee2 	bl	8000c10 <_printf_common>
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d14c      	bne.n	8000eea <_printf_i+0x1fe>
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	b004      	add	sp, #16
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	4835      	ldr	r0, [pc, #212]	; (8000f30 <_printf_i+0x244>)
 8000e5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	680e      	ldr	r6, [r1, #0]
 8000e64:	061f      	lsls	r7, r3, #24
 8000e66:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e6a:	600e      	str	r6, [r1, #0]
 8000e6c:	d514      	bpl.n	8000e98 <_printf_i+0x1ac>
 8000e6e:	07d9      	lsls	r1, r3, #31
 8000e70:	bf44      	itt	mi
 8000e72:	f043 0320 	orrmi.w	r3, r3, #32
 8000e76:	6023      	strmi	r3, [r4, #0]
 8000e78:	b91d      	cbnz	r5, 8000e82 <_printf_i+0x196>
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f023 0320 	bic.w	r3, r3, #32
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	2310      	movs	r3, #16
 8000e84:	e7b0      	b.n	8000de8 <_printf_i+0xfc>
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	2378      	movs	r3, #120	; 0x78
 8000e90:	4828      	ldr	r0, [pc, #160]	; (8000f34 <_printf_i+0x248>)
 8000e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e96:	e7e3      	b.n	8000e60 <_printf_i+0x174>
 8000e98:	065e      	lsls	r6, r3, #25
 8000e9a:	bf48      	it	mi
 8000e9c:	b2ad      	uxthmi	r5, r5
 8000e9e:	e7e6      	b.n	8000e6e <_printf_i+0x182>
 8000ea0:	4616      	mov	r6, r2
 8000ea2:	e7bb      	b.n	8000e1c <_printf_i+0x130>
 8000ea4:	680b      	ldr	r3, [r1, #0]
 8000ea6:	6826      	ldr	r6, [r4, #0]
 8000ea8:	6960      	ldr	r0, [r4, #20]
 8000eaa:	1d1d      	adds	r5, r3, #4
 8000eac:	600d      	str	r5, [r1, #0]
 8000eae:	0635      	lsls	r5, r6, #24
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	d501      	bpl.n	8000eb8 <_printf_i+0x1cc>
 8000eb4:	6018      	str	r0, [r3, #0]
 8000eb6:	e002      	b.n	8000ebe <_printf_i+0x1d2>
 8000eb8:	0671      	lsls	r1, r6, #25
 8000eba:	d5fb      	bpl.n	8000eb4 <_printf_i+0x1c8>
 8000ebc:	8018      	strh	r0, [r3, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	6123      	str	r3, [r4, #16]
 8000ec2:	4616      	mov	r6, r2
 8000ec4:	e7ba      	b.n	8000e3c <_printf_i+0x150>
 8000ec6:	680b      	ldr	r3, [r1, #0]
 8000ec8:	1d1a      	adds	r2, r3, #4
 8000eca:	600a      	str	r2, [r1, #0]
 8000ecc:	681e      	ldr	r6, [r3, #0]
 8000ece:	6862      	ldr	r2, [r4, #4]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	f7ff f984 	bl	80001e0 <memchr>
 8000ed8:	b108      	cbz	r0, 8000ede <_printf_i+0x1f2>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	6060      	str	r0, [r4, #4]
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	6123      	str	r3, [r4, #16]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ee8:	e7a8      	b.n	8000e3c <_printf_i+0x150>
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	4632      	mov	r2, r6
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	47d0      	blx	sl
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d0ab      	beq.n	8000e50 <_printf_i+0x164>
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	079b      	lsls	r3, r3, #30
 8000efc:	d413      	bmi.n	8000f26 <_printf_i+0x23a>
 8000efe:	68e0      	ldr	r0, [r4, #12]
 8000f00:	9b03      	ldr	r3, [sp, #12]
 8000f02:	4298      	cmp	r0, r3
 8000f04:	bfb8      	it	lt
 8000f06:	4618      	movlt	r0, r3
 8000f08:	e7a4      	b.n	8000e54 <_printf_i+0x168>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	4649      	mov	r1, r9
 8000f10:	4640      	mov	r0, r8
 8000f12:	47d0      	blx	sl
 8000f14:	3001      	adds	r0, #1
 8000f16:	d09b      	beq.n	8000e50 <_printf_i+0x164>
 8000f18:	3501      	adds	r5, #1
 8000f1a:	68e3      	ldr	r3, [r4, #12]
 8000f1c:	9903      	ldr	r1, [sp, #12]
 8000f1e:	1a5b      	subs	r3, r3, r1
 8000f20:	42ab      	cmp	r3, r5
 8000f22:	dcf2      	bgt.n	8000f0a <_printf_i+0x21e>
 8000f24:	e7eb      	b.n	8000efe <_printf_i+0x212>
 8000f26:	2500      	movs	r5, #0
 8000f28:	f104 0619 	add.w	r6, r4, #25
 8000f2c:	e7f5      	b.n	8000f1a <_printf_i+0x22e>
 8000f2e:	bf00      	nop
 8000f30:	080015d9 	.word	0x080015d9
 8000f34:	080015ea 	.word	0x080015ea

08000f38 <_sbrk_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4d06      	ldr	r5, [pc, #24]	; (8000f54 <_sbrk_r+0x1c>)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	602b      	str	r3, [r5, #0]
 8000f44:	f7ff fa78 	bl	8000438 <_sbrk>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_sbrk_r+0x1a>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_sbrk_r+0x1a>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	2000009c 	.word	0x2000009c

08000f58 <__sread>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f60:	f000 fab4 	bl	80014cc <_read_r>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	bfab      	itete	ge
 8000f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f6c:	181b      	addge	r3, r3, r0
 8000f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f72:	bfac      	ite	ge
 8000f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f76:	81a3      	strhlt	r3, [r4, #12]
 8000f78:	bd10      	pop	{r4, pc}

08000f7a <__swrite>:
 8000f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7e:	461f      	mov	r7, r3
 8000f80:	898b      	ldrh	r3, [r1, #12]
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	4605      	mov	r5, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	4616      	mov	r6, r2
 8000f8a:	d505      	bpl.n	8000f98 <__swrite+0x1e>
 8000f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f90:	2302      	movs	r3, #2
 8000f92:	2200      	movs	r2, #0
 8000f94:	f000 f9c8 	bl	8001328 <_lseek_r>
 8000f98:	89a3      	ldrh	r3, [r4, #12]
 8000f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa2:	81a3      	strh	r3, [r4, #12]
 8000fa4:	4632      	mov	r2, r6
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fae:	f000 b869 	b.w	8001084 <_write_r>

08000fb2 <__sseek>:
 8000fb2:	b510      	push	{r4, lr}
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fba:	f000 f9b5 	bl	8001328 <_lseek_r>
 8000fbe:	1c43      	adds	r3, r0, #1
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	bf15      	itete	ne
 8000fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fce:	81a3      	strheq	r3, [r4, #12]
 8000fd0:	bf18      	it	ne
 8000fd2:	81a3      	strhne	r3, [r4, #12]
 8000fd4:	bd10      	pop	{r4, pc}

08000fd6 <__sclose>:
 8000fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fda:	f000 b8d3 	b.w	8001184 <_close_r>
	...

08000fe0 <__swbuf_r>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	460e      	mov	r6, r1
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4605      	mov	r5, r0
 8000fe8:	b118      	cbz	r0, 8000ff2 <__swbuf_r+0x12>
 8000fea:	6983      	ldr	r3, [r0, #24]
 8000fec:	b90b      	cbnz	r3, 8000ff2 <__swbuf_r+0x12>
 8000fee:	f7ff fbbb 	bl	8000768 <__sinit>
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <__swbuf_r+0x98>)
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	d12b      	bne.n	8001050 <__swbuf_r+0x70>
 8000ff8:	686c      	ldr	r4, [r5, #4]
 8000ffa:	69a3      	ldr	r3, [r4, #24]
 8000ffc:	60a3      	str	r3, [r4, #8]
 8000ffe:	89a3      	ldrh	r3, [r4, #12]
 8001000:	071a      	lsls	r2, r3, #28
 8001002:	d52f      	bpl.n	8001064 <__swbuf_r+0x84>
 8001004:	6923      	ldr	r3, [r4, #16]
 8001006:	b36b      	cbz	r3, 8001064 <__swbuf_r+0x84>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	1ac0      	subs	r0, r0, r3
 800100e:	6963      	ldr	r3, [r4, #20]
 8001010:	b2f6      	uxtb	r6, r6
 8001012:	4283      	cmp	r3, r0
 8001014:	4637      	mov	r7, r6
 8001016:	dc04      	bgt.n	8001022 <__swbuf_r+0x42>
 8001018:	4621      	mov	r1, r4
 800101a:	4628      	mov	r0, r5
 800101c:	f000 f948 	bl	80012b0 <_fflush_r>
 8001020:	bb30      	cbnz	r0, 8001070 <__swbuf_r+0x90>
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	3b01      	subs	r3, #1
 8001026:	60a3      	str	r3, [r4, #8]
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	6022      	str	r2, [r4, #0]
 800102e:	701e      	strb	r6, [r3, #0]
 8001030:	6963      	ldr	r3, [r4, #20]
 8001032:	3001      	adds	r0, #1
 8001034:	4283      	cmp	r3, r0
 8001036:	d004      	beq.n	8001042 <__swbuf_r+0x62>
 8001038:	89a3      	ldrh	r3, [r4, #12]
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	d506      	bpl.n	800104c <__swbuf_r+0x6c>
 800103e:	2e0a      	cmp	r6, #10
 8001040:	d104      	bne.n	800104c <__swbuf_r+0x6c>
 8001042:	4621      	mov	r1, r4
 8001044:	4628      	mov	r0, r5
 8001046:	f000 f933 	bl	80012b0 <_fflush_r>
 800104a:	b988      	cbnz	r0, 8001070 <__swbuf_r+0x90>
 800104c:	4638      	mov	r0, r7
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <__swbuf_r+0x9c>)
 8001052:	429c      	cmp	r4, r3
 8001054:	d101      	bne.n	800105a <__swbuf_r+0x7a>
 8001056:	68ac      	ldr	r4, [r5, #8]
 8001058:	e7cf      	b.n	8000ffa <__swbuf_r+0x1a>
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <__swbuf_r+0xa0>)
 800105c:	429c      	cmp	r4, r3
 800105e:	bf08      	it	eq
 8001060:	68ec      	ldreq	r4, [r5, #12]
 8001062:	e7ca      	b.n	8000ffa <__swbuf_r+0x1a>
 8001064:	4621      	mov	r1, r4
 8001066:	4628      	mov	r0, r5
 8001068:	f000 f81e 	bl	80010a8 <__swsetup_r>
 800106c:	2800      	cmp	r0, #0
 800106e:	d0cb      	beq.n	8001008 <__swbuf_r+0x28>
 8001070:	f04f 37ff 	mov.w	r7, #4294967295
 8001074:	e7ea      	b.n	800104c <__swbuf_r+0x6c>
 8001076:	bf00      	nop
 8001078:	08001588 	.word	0x08001588
 800107c:	080015a8 	.word	0x080015a8
 8001080:	08001568 	.word	0x08001568

08001084 <_write_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4d07      	ldr	r5, [pc, #28]	; (80010a4 <_write_r+0x20>)
 8001088:	4604      	mov	r4, r0
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	2200      	movs	r2, #0
 8001090:	602a      	str	r2, [r5, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff f97f 	bl	8000396 <_write>
 8001098:	1c43      	adds	r3, r0, #1
 800109a:	d102      	bne.n	80010a2 <_write_r+0x1e>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	b103      	cbz	r3, 80010a2 <_write_r+0x1e>
 80010a0:	6023      	str	r3, [r4, #0]
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	2000009c 	.word	0x2000009c

080010a8 <__swsetup_r>:
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <__swsetup_r+0xcc>)
 80010aa:	b570      	push	{r4, r5, r6, lr}
 80010ac:	681d      	ldr	r5, [r3, #0]
 80010ae:	4606      	mov	r6, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	b125      	cbz	r5, 80010be <__swsetup_r+0x16>
 80010b4:	69ab      	ldr	r3, [r5, #24]
 80010b6:	b913      	cbnz	r3, 80010be <__swsetup_r+0x16>
 80010b8:	4628      	mov	r0, r5
 80010ba:	f7ff fb55 	bl	8000768 <__sinit>
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <__swsetup_r+0xd0>)
 80010c0:	429c      	cmp	r4, r3
 80010c2:	d10f      	bne.n	80010e4 <__swsetup_r+0x3c>
 80010c4:	686c      	ldr	r4, [r5, #4]
 80010c6:	89a3      	ldrh	r3, [r4, #12]
 80010c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010cc:	0719      	lsls	r1, r3, #28
 80010ce:	d42c      	bmi.n	800112a <__swsetup_r+0x82>
 80010d0:	06dd      	lsls	r5, r3, #27
 80010d2:	d411      	bmi.n	80010f8 <__swsetup_r+0x50>
 80010d4:	2309      	movs	r3, #9
 80010d6:	6033      	str	r3, [r6, #0]
 80010d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010dc:	81a3      	strh	r3, [r4, #12]
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	e03e      	b.n	8001162 <__swsetup_r+0xba>
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <__swsetup_r+0xd4>)
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d101      	bne.n	80010ee <__swsetup_r+0x46>
 80010ea:	68ac      	ldr	r4, [r5, #8]
 80010ec:	e7eb      	b.n	80010c6 <__swsetup_r+0x1e>
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <__swsetup_r+0xd8>)
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf08      	it	eq
 80010f4:	68ec      	ldreq	r4, [r5, #12]
 80010f6:	e7e6      	b.n	80010c6 <__swsetup_r+0x1e>
 80010f8:	0758      	lsls	r0, r3, #29
 80010fa:	d512      	bpl.n	8001122 <__swsetup_r+0x7a>
 80010fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010fe:	b141      	cbz	r1, 8001112 <__swsetup_r+0x6a>
 8001100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001104:	4299      	cmp	r1, r3
 8001106:	d002      	beq.n	800110e <__swsetup_r+0x66>
 8001108:	4630      	mov	r0, r6
 800110a:	f000 f98f 	bl	800142c <_free_r>
 800110e:	2300      	movs	r3, #0
 8001110:	6363      	str	r3, [r4, #52]	; 0x34
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	6063      	str	r3, [r4, #4]
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	b94b      	cbnz	r3, 8001142 <__swsetup_r+0x9a>
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001138:	d003      	beq.n	8001142 <__swsetup_r+0x9a>
 800113a:	4621      	mov	r1, r4
 800113c:	4630      	mov	r0, r6
 800113e:	f000 f929 	bl	8001394 <__smakebuf_r>
 8001142:	89a0      	ldrh	r0, [r4, #12]
 8001144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001148:	f010 0301 	ands.w	r3, r0, #1
 800114c:	d00a      	beq.n	8001164 <__swsetup_r+0xbc>
 800114e:	2300      	movs	r3, #0
 8001150:	60a3      	str	r3, [r4, #8]
 8001152:	6963      	ldr	r3, [r4, #20]
 8001154:	425b      	negs	r3, r3
 8001156:	61a3      	str	r3, [r4, #24]
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	b943      	cbnz	r3, 800116e <__swsetup_r+0xc6>
 800115c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001160:	d1ba      	bne.n	80010d8 <__swsetup_r+0x30>
 8001162:	bd70      	pop	{r4, r5, r6, pc}
 8001164:	0781      	lsls	r1, r0, #30
 8001166:	bf58      	it	pl
 8001168:	6963      	ldrpl	r3, [r4, #20]
 800116a:	60a3      	str	r3, [r4, #8]
 800116c:	e7f4      	b.n	8001158 <__swsetup_r+0xb0>
 800116e:	2000      	movs	r0, #0
 8001170:	e7f7      	b.n	8001162 <__swsetup_r+0xba>
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000
 8001178:	08001588 	.word	0x08001588
 800117c:	080015a8 	.word	0x080015a8
 8001180:	08001568 	.word	0x08001568

08001184 <_close_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4d06      	ldr	r5, [pc, #24]	; (80011a0 <_close_r+0x1c>)
 8001188:	2300      	movs	r3, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	f7ff f91d 	bl	80003ce <_close>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_close_r+0x1a>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	b103      	cbz	r3, 800119e <_close_r+0x1a>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	2000009c 	.word	0x2000009c

080011a4 <__sflush_r>:
 80011a4:	898a      	ldrh	r2, [r1, #12]
 80011a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011aa:	4605      	mov	r5, r0
 80011ac:	0710      	lsls	r0, r2, #28
 80011ae:	460c      	mov	r4, r1
 80011b0:	d458      	bmi.n	8001264 <__sflush_r+0xc0>
 80011b2:	684b      	ldr	r3, [r1, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dc05      	bgt.n	80011c4 <__sflush_r+0x20>
 80011b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <__sflush_r+0x20>
 80011be:	2000      	movs	r0, #0
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d0f9      	beq.n	80011be <__sflush_r+0x1a>
 80011ca:	2300      	movs	r3, #0
 80011cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011d0:	682f      	ldr	r7, [r5, #0]
 80011d2:	602b      	str	r3, [r5, #0]
 80011d4:	d032      	beq.n	800123c <__sflush_r+0x98>
 80011d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	075a      	lsls	r2, r3, #29
 80011dc:	d505      	bpl.n	80011ea <__sflush_r+0x46>
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	1ac0      	subs	r0, r0, r3
 80011e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011e4:	b10b      	cbz	r3, 80011ea <__sflush_r+0x46>
 80011e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e8:	1ac0      	subs	r0, r0, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	4602      	mov	r2, r0
 80011ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011f0:	6a21      	ldr	r1, [r4, #32]
 80011f2:	4628      	mov	r0, r5
 80011f4:	47b0      	blx	r6
 80011f6:	1c43      	adds	r3, r0, #1
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	d106      	bne.n	800120a <__sflush_r+0x66>
 80011fc:	6829      	ldr	r1, [r5, #0]
 80011fe:	291d      	cmp	r1, #29
 8001200:	d82c      	bhi.n	800125c <__sflush_r+0xb8>
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <__sflush_r+0x108>)
 8001204:	40ca      	lsrs	r2, r1
 8001206:	07d6      	lsls	r6, r2, #31
 8001208:	d528      	bpl.n	800125c <__sflush_r+0xb8>
 800120a:	2200      	movs	r2, #0
 800120c:	6062      	str	r2, [r4, #4]
 800120e:	04d9      	lsls	r1, r3, #19
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	6022      	str	r2, [r4, #0]
 8001214:	d504      	bpl.n	8001220 <__sflush_r+0x7c>
 8001216:	1c42      	adds	r2, r0, #1
 8001218:	d101      	bne.n	800121e <__sflush_r+0x7a>
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	b903      	cbnz	r3, 8001220 <__sflush_r+0x7c>
 800121e:	6560      	str	r0, [r4, #84]	; 0x54
 8001220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001222:	602f      	str	r7, [r5, #0]
 8001224:	2900      	cmp	r1, #0
 8001226:	d0ca      	beq.n	80011be <__sflush_r+0x1a>
 8001228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800122c:	4299      	cmp	r1, r3
 800122e:	d002      	beq.n	8001236 <__sflush_r+0x92>
 8001230:	4628      	mov	r0, r5
 8001232:	f000 f8fb 	bl	800142c <_free_r>
 8001236:	2000      	movs	r0, #0
 8001238:	6360      	str	r0, [r4, #52]	; 0x34
 800123a:	e7c1      	b.n	80011c0 <__sflush_r+0x1c>
 800123c:	6a21      	ldr	r1, [r4, #32]
 800123e:	2301      	movs	r3, #1
 8001240:	4628      	mov	r0, r5
 8001242:	47b0      	blx	r6
 8001244:	1c41      	adds	r1, r0, #1
 8001246:	d1c7      	bne.n	80011d8 <__sflush_r+0x34>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0c4      	beq.n	80011d8 <__sflush_r+0x34>
 800124e:	2b1d      	cmp	r3, #29
 8001250:	d001      	beq.n	8001256 <__sflush_r+0xb2>
 8001252:	2b16      	cmp	r3, #22
 8001254:	d101      	bne.n	800125a <__sflush_r+0xb6>
 8001256:	602f      	str	r7, [r5, #0]
 8001258:	e7b1      	b.n	80011be <__sflush_r+0x1a>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001260:	81a3      	strh	r3, [r4, #12]
 8001262:	e7ad      	b.n	80011c0 <__sflush_r+0x1c>
 8001264:	690f      	ldr	r7, [r1, #16]
 8001266:	2f00      	cmp	r7, #0
 8001268:	d0a9      	beq.n	80011be <__sflush_r+0x1a>
 800126a:	0793      	lsls	r3, r2, #30
 800126c:	680e      	ldr	r6, [r1, #0]
 800126e:	bf08      	it	eq
 8001270:	694b      	ldreq	r3, [r1, #20]
 8001272:	600f      	str	r7, [r1, #0]
 8001274:	bf18      	it	ne
 8001276:	2300      	movne	r3, #0
 8001278:	eba6 0807 	sub.w	r8, r6, r7
 800127c:	608b      	str	r3, [r1, #8]
 800127e:	f1b8 0f00 	cmp.w	r8, #0
 8001282:	dd9c      	ble.n	80011be <__sflush_r+0x1a>
 8001284:	6a21      	ldr	r1, [r4, #32]
 8001286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001288:	4643      	mov	r3, r8
 800128a:	463a      	mov	r2, r7
 800128c:	4628      	mov	r0, r5
 800128e:	47b0      	blx	r6
 8001290:	2800      	cmp	r0, #0
 8001292:	dc06      	bgt.n	80012a2 <__sflush_r+0xfe>
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	e78e      	b.n	80011c0 <__sflush_r+0x1c>
 80012a2:	4407      	add	r7, r0
 80012a4:	eba8 0800 	sub.w	r8, r8, r0
 80012a8:	e7e9      	b.n	800127e <__sflush_r+0xda>
 80012aa:	bf00      	nop
 80012ac:	20400001 	.word	0x20400001

080012b0 <_fflush_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	690b      	ldr	r3, [r1, #16]
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	b913      	cbnz	r3, 80012c0 <_fflush_r+0x10>
 80012ba:	2500      	movs	r5, #0
 80012bc:	4628      	mov	r0, r5
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	b118      	cbz	r0, 80012ca <_fflush_r+0x1a>
 80012c2:	6983      	ldr	r3, [r0, #24]
 80012c4:	b90b      	cbnz	r3, 80012ca <_fflush_r+0x1a>
 80012c6:	f7ff fa4f 	bl	8000768 <__sinit>
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <_fflush_r+0x6c>)
 80012cc:	429c      	cmp	r4, r3
 80012ce:	d11b      	bne.n	8001308 <_fflush_r+0x58>
 80012d0:	686c      	ldr	r4, [r5, #4]
 80012d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ef      	beq.n	80012ba <_fflush_r+0xa>
 80012da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012dc:	07d0      	lsls	r0, r2, #31
 80012de:	d404      	bmi.n	80012ea <_fflush_r+0x3a>
 80012e0:	0599      	lsls	r1, r3, #22
 80012e2:	d402      	bmi.n	80012ea <_fflush_r+0x3a>
 80012e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012e6:	f7ff fadd 	bl	80008a4 <__retarget_lock_acquire_recursive>
 80012ea:	4628      	mov	r0, r5
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ff59 	bl	80011a4 <__sflush_r>
 80012f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012f4:	07da      	lsls	r2, r3, #31
 80012f6:	4605      	mov	r5, r0
 80012f8:	d4e0      	bmi.n	80012bc <_fflush_r+0xc>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	059b      	lsls	r3, r3, #22
 80012fe:	d4dd      	bmi.n	80012bc <_fflush_r+0xc>
 8001300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001302:	f7ff fad0 	bl	80008a6 <__retarget_lock_release_recursive>
 8001306:	e7d9      	b.n	80012bc <_fflush_r+0xc>
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <_fflush_r+0x70>)
 800130a:	429c      	cmp	r4, r3
 800130c:	d101      	bne.n	8001312 <_fflush_r+0x62>
 800130e:	68ac      	ldr	r4, [r5, #8]
 8001310:	e7df      	b.n	80012d2 <_fflush_r+0x22>
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <_fflush_r+0x74>)
 8001314:	429c      	cmp	r4, r3
 8001316:	bf08      	it	eq
 8001318:	68ec      	ldreq	r4, [r5, #12]
 800131a:	e7da      	b.n	80012d2 <_fflush_r+0x22>
 800131c:	08001588 	.word	0x08001588
 8001320:	080015a8 	.word	0x080015a8
 8001324:	08001568 	.word	0x08001568

08001328 <_lseek_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4d07      	ldr	r5, [pc, #28]	; (8001348 <_lseek_r+0x20>)
 800132c:	4604      	mov	r4, r0
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	2200      	movs	r2, #0
 8001334:	602a      	str	r2, [r5, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f7ff f870 	bl	800041c <_lseek>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_lseek_r+0x1e>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_lseek_r+0x1e>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	2000009c 	.word	0x2000009c

0800134c <__swhatbuf_r>:
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	460e      	mov	r6, r1
 8001350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001354:	2900      	cmp	r1, #0
 8001356:	b096      	sub	sp, #88	; 0x58
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	da07      	bge.n	800136e <__swhatbuf_r+0x22>
 800135e:	2300      	movs	r3, #0
 8001360:	602b      	str	r3, [r5, #0]
 8001362:	89b3      	ldrh	r3, [r6, #12]
 8001364:	061a      	lsls	r2, r3, #24
 8001366:	d410      	bmi.n	800138a <__swhatbuf_r+0x3e>
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	e00e      	b.n	800138c <__swhatbuf_r+0x40>
 800136e:	466a      	mov	r2, sp
 8001370:	f000 f8be 	bl	80014f0 <_fstat_r>
 8001374:	2800      	cmp	r0, #0
 8001376:	dbf2      	blt.n	800135e <__swhatbuf_r+0x12>
 8001378:	9a01      	ldr	r2, [sp, #4]
 800137a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800137e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001382:	425a      	negs	r2, r3
 8001384:	415a      	adcs	r2, r3
 8001386:	602a      	str	r2, [r5, #0]
 8001388:	e7ee      	b.n	8001368 <__swhatbuf_r+0x1c>
 800138a:	2340      	movs	r3, #64	; 0x40
 800138c:	2000      	movs	r0, #0
 800138e:	6023      	str	r3, [r4, #0]
 8001390:	b016      	add	sp, #88	; 0x58
 8001392:	bd70      	pop	{r4, r5, r6, pc}

08001394 <__smakebuf_r>:
 8001394:	898b      	ldrh	r3, [r1, #12]
 8001396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001398:	079d      	lsls	r5, r3, #30
 800139a:	4606      	mov	r6, r0
 800139c:	460c      	mov	r4, r1
 800139e:	d507      	bpl.n	80013b0 <__smakebuf_r+0x1c>
 80013a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	6123      	str	r3, [r4, #16]
 80013a8:	2301      	movs	r3, #1
 80013aa:	6163      	str	r3, [r4, #20]
 80013ac:	b002      	add	sp, #8
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	ab01      	add	r3, sp, #4
 80013b2:	466a      	mov	r2, sp
 80013b4:	f7ff ffca 	bl	800134c <__swhatbuf_r>
 80013b8:	9900      	ldr	r1, [sp, #0]
 80013ba:	4605      	mov	r5, r0
 80013bc:	4630      	mov	r0, r6
 80013be:	f7ff fa73 	bl	80008a8 <_malloc_r>
 80013c2:	b948      	cbnz	r0, 80013d8 <__smakebuf_r+0x44>
 80013c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c8:	059a      	lsls	r2, r3, #22
 80013ca:	d4ef      	bmi.n	80013ac <__smakebuf_r+0x18>
 80013cc:	f023 0303 	bic.w	r3, r3, #3
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	81a3      	strh	r3, [r4, #12]
 80013d6:	e7e3      	b.n	80013a0 <__smakebuf_r+0xc>
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <__smakebuf_r+0x7c>)
 80013da:	62b3      	str	r3, [r6, #40]	; 0x28
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	6020      	str	r0, [r4, #0]
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	81a3      	strh	r3, [r4, #12]
 80013e6:	9b00      	ldr	r3, [sp, #0]
 80013e8:	6163      	str	r3, [r4, #20]
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	6120      	str	r0, [r4, #16]
 80013ee:	b15b      	cbz	r3, 8001408 <__smakebuf_r+0x74>
 80013f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013f4:	4630      	mov	r0, r6
 80013f6:	f000 f88d 	bl	8001514 <_isatty_r>
 80013fa:	b128      	cbz	r0, 8001408 <__smakebuf_r+0x74>
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	81a3      	strh	r3, [r4, #12]
 8001408:	89a0      	ldrh	r0, [r4, #12]
 800140a:	4305      	orrs	r5, r0
 800140c:	81a5      	strh	r5, [r4, #12]
 800140e:	e7cd      	b.n	80013ac <__smakebuf_r+0x18>
 8001410:	08000701 	.word	0x08000701

08001414 <__malloc_lock>:
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <__malloc_lock+0x8>)
 8001416:	f7ff ba45 	b.w	80008a4 <__retarget_lock_acquire_recursive>
 800141a:	bf00      	nop
 800141c:	20000094 	.word	0x20000094

08001420 <__malloc_unlock>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__malloc_unlock+0x8>)
 8001422:	f7ff ba40 	b.w	80008a6 <__retarget_lock_release_recursive>
 8001426:	bf00      	nop
 8001428:	20000094 	.word	0x20000094

0800142c <_free_r>:
 800142c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800142e:	2900      	cmp	r1, #0
 8001430:	d048      	beq.n	80014c4 <_free_r+0x98>
 8001432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001436:	9001      	str	r0, [sp, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f1a1 0404 	sub.w	r4, r1, #4
 800143e:	bfb8      	it	lt
 8001440:	18e4      	addlt	r4, r4, r3
 8001442:	f7ff ffe7 	bl	8001414 <__malloc_lock>
 8001446:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <_free_r+0x9c>)
 8001448:	9801      	ldr	r0, [sp, #4]
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	4615      	mov	r5, r2
 800144e:	b933      	cbnz	r3, 800145e <_free_r+0x32>
 8001450:	6063      	str	r3, [r4, #4]
 8001452:	6014      	str	r4, [r2, #0]
 8001454:	b003      	add	sp, #12
 8001456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800145a:	f7ff bfe1 	b.w	8001420 <__malloc_unlock>
 800145e:	42a3      	cmp	r3, r4
 8001460:	d90b      	bls.n	800147a <_free_r+0x4e>
 8001462:	6821      	ldr	r1, [r4, #0]
 8001464:	1862      	adds	r2, r4, r1
 8001466:	4293      	cmp	r3, r2
 8001468:	bf04      	itt	eq
 800146a:	681a      	ldreq	r2, [r3, #0]
 800146c:	685b      	ldreq	r3, [r3, #4]
 800146e:	6063      	str	r3, [r4, #4]
 8001470:	bf04      	itt	eq
 8001472:	1852      	addeq	r2, r2, r1
 8001474:	6022      	streq	r2, [r4, #0]
 8001476:	602c      	str	r4, [r5, #0]
 8001478:	e7ec      	b.n	8001454 <_free_r+0x28>
 800147a:	461a      	mov	r2, r3
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	b10b      	cbz	r3, 8001484 <_free_r+0x58>
 8001480:	42a3      	cmp	r3, r4
 8001482:	d9fa      	bls.n	800147a <_free_r+0x4e>
 8001484:	6811      	ldr	r1, [r2, #0]
 8001486:	1855      	adds	r5, r2, r1
 8001488:	42a5      	cmp	r5, r4
 800148a:	d10b      	bne.n	80014a4 <_free_r+0x78>
 800148c:	6824      	ldr	r4, [r4, #0]
 800148e:	4421      	add	r1, r4
 8001490:	1854      	adds	r4, r2, r1
 8001492:	42a3      	cmp	r3, r4
 8001494:	6011      	str	r1, [r2, #0]
 8001496:	d1dd      	bne.n	8001454 <_free_r+0x28>
 8001498:	681c      	ldr	r4, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	6053      	str	r3, [r2, #4]
 800149e:	4421      	add	r1, r4
 80014a0:	6011      	str	r1, [r2, #0]
 80014a2:	e7d7      	b.n	8001454 <_free_r+0x28>
 80014a4:	d902      	bls.n	80014ac <_free_r+0x80>
 80014a6:	230c      	movs	r3, #12
 80014a8:	6003      	str	r3, [r0, #0]
 80014aa:	e7d3      	b.n	8001454 <_free_r+0x28>
 80014ac:	6825      	ldr	r5, [r4, #0]
 80014ae:	1961      	adds	r1, r4, r5
 80014b0:	428b      	cmp	r3, r1
 80014b2:	bf04      	itt	eq
 80014b4:	6819      	ldreq	r1, [r3, #0]
 80014b6:	685b      	ldreq	r3, [r3, #4]
 80014b8:	6063      	str	r3, [r4, #4]
 80014ba:	bf04      	itt	eq
 80014bc:	1949      	addeq	r1, r1, r5
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	6054      	str	r4, [r2, #4]
 80014c2:	e7c7      	b.n	8001454 <_free_r+0x28>
 80014c4:	b003      	add	sp, #12
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	20000084 	.word	0x20000084

080014cc <_read_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d07      	ldr	r5, [pc, #28]	; (80014ec <_read_r+0x20>)
 80014d0:	4604      	mov	r4, r0
 80014d2:	4608      	mov	r0, r1
 80014d4:	4611      	mov	r1, r2
 80014d6:	2200      	movs	r2, #0
 80014d8:	602a      	str	r2, [r5, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	f7fe ff3e 	bl	800035c <_read>
 80014e0:	1c43      	adds	r3, r0, #1
 80014e2:	d102      	bne.n	80014ea <_read_r+0x1e>
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	b103      	cbz	r3, 80014ea <_read_r+0x1e>
 80014e8:	6023      	str	r3, [r4, #0]
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
 80014ec:	2000009c 	.word	0x2000009c

080014f0 <_fstat_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4d07      	ldr	r5, [pc, #28]	; (8001510 <_fstat_r+0x20>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	602b      	str	r3, [r5, #0]
 80014fe:	f7fe ff72 	bl	80003e6 <_fstat>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d102      	bne.n	800150c <_fstat_r+0x1c>
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	b103      	cbz	r3, 800150c <_fstat_r+0x1c>
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	2000009c 	.word	0x2000009c

08001514 <_isatty_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	; (8001530 <_isatty_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7fe ff71 	bl	8000406 <_isatty>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_isatty_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_isatty_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	2000009c 	.word	0x2000009c

08001534 <_init>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr

08001540 <_fini>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr
